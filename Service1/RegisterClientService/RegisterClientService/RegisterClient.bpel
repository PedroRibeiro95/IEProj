<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Mar 27 14:34:57 PDT 2017
  Author:  oracle
  Type: BPEL 2.0 Process
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="RegisterClient"
               targetNamespace="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://xmlns.oracle.com/CheckRegisterService/CheckRegister/CheckRegister"
         xmlns:ns2="http://verifyaddress/"
         xmlns:ns3="http://passwordgenerator/"
         xmlns:ns4="http://xmlns.oracle.com/GetClientIDService/GetClientID/GetClientID"
         xmlns:ns5="http://xmlns.oracle.com/CreateClientService/CreateClient/CreateClient"
         xmlns:ns6="http://sendsmsservice/"
         xmlns:ns8="http://www.tecnico.ie.proj.com"
         xmlns:ns7="http://www.example.org"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns9="http://xmlns.oracle.com/GetClientIDService/GetClientID/GetID">

    <import namespace="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient" location="RegisterClient.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="registerclient_client" partnerLinkType="client:RegisterClient" myRole="RegisterClientProvider"/>
    <partnerLink name="CheckRegister" partnerLinkType="ns1:CheckRegister"
                 partnerRole="CheckRegisterProvider"/>
    <partnerLink name="VerifyAddress" partnerLinkType="ns2:VerifyAddress"
                 partnerRole="VerifyAddressCTT"/>
    <partnerLink name="PasswordGenerator"
                 partnerLinkType="ns3:PasswordGenerator"
                 partnerRole="GeneratePassword"/>
    <partnerLink name="CreateClient" partnerLinkType="ns5:CreateClient"
                 partnerRole="CreateClientProvider"
                 myRole="CreateClientRequester"/>
    <partnerLink name="SendSMS" partnerLinkType="ns6:SendSMS"
                 partnerRole="SendSMSService"/>
    <partnerLink name="GetClientID" partnerLinkType="ns9:GetID"
                 partnerRole="GetIDProvider"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:RegisterClientRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:RegisterClientResponseMessage"/>
    <variable name="Invoke_CheckRegister_process_InputVariable"
              messageType="ns1:CheckRegisterRequestMessage"/>
    <variable name="Invoke_CheckRegister_process_OutputVariable"
              messageType="ns1:CheckRegisterResponseMessage"/>
    <variable name="Invoke_VerifyAddress_verifiedAddress_InputVariable"
              messageType="ns2:verifiedAddress"/>
    <variable name="Invoke_VerifyAddress_verifiedAddress_OutputVariable"
              messageType="ns2:verifiedAddressResponse"/>
    <variable name="Invoke_PasswordGenerator_generatePassword_InputVariable"
              messageType="ns3:generatePassword"/>
    <variable name="Invoke_PasswordGenerator_generatePassword_OutputVariable"
              messageType="ns3:generatePasswordResponse"/>
    <variable name="Invoke_CreateClient_process_InputVariable"
              messageType="ns5:CreateClientRequestMessage"/>
    <variable name="Invoke_GetClientID_process_InputVariable"
              messageType="ns9:GetIDRequestMessage"/>
    <variable name="Invoke_GetClientID_process_OutputVariable"
              messageType="ns9:GetIDResponseMessage"/>
    <variable name="Invoke_SendSMS_processMessage_InputVariable"
              messageType="ns6:processMessage"/>
    <variable name="Invoke_SendSMS_processMessage_OutputVariable"
              messageType="ns6:processMessageResponse"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in RegisterClient.wsdl) -->
    <receive name="receiveInput" partnerLink="registerclient_client" portType="client:RegisterClient" operation="process" variable="inputVariable" createInstance="yes"/>
    <assign name="Assign1">
      <copy>
        <from>$inputVariable.payload/ns7:Email</from>
        <to>$Invoke_CheckRegister_process_InputVariable.payload/ns8:Email</to>
      </copy>
    </assign>
    <invoke name="Invoke_CheckRegister"
            partnerLink="CheckRegister" portType="ns1:CheckRegister"
            operation="process" bpelx:invokeAsDetail="no"
            inputVariable="Invoke_CheckRegister_process_InputVariable"
            outputVariable="Invoke_CheckRegister_process_OutputVariable"/>
    <if name="If1">
      <documentation>
        <![CDATA[No account]]>
      </documentation>
      <condition>$Invoke_CheckRegister_process_OutputVariable.payload/ns8:Response = 'NOACC'</condition>
      <sequence name="Sequence1">
        <assign name="Assign2">
          <copy>
            <from>$inputVariable.payload/ns7:Address</from>
            <to>$Invoke_VerifyAddress_verifiedAddress_InputVariable.parameters/Address</to>
          </copy>
        </assign>
        <invoke name="Invoke_VerifyAddress" partnerLink="VerifyAddress"
                portType="ns2:VerifyAddressCTT" operation="verifiedAddress"
                bpelx:invokeAsDetail="no"
                inputVariable="Invoke_VerifyAddress_verifiedAddress_InputVariable"
                outputVariable="Invoke_VerifyAddress_verifiedAddress_OutputVariable"/>
        <if name="If2">
          <documentation>
            <![CDATA[Address ok]]>
          </documentation>
          <condition>$Invoke_VerifyAddress_verifiedAddress_OutputVariable.parameters/return = true()</condition>
          <sequence name="Sequence2">
            <invoke name="Invoke_PasswordGenerator" bpelx:invokeAsDetail="no"
                    partnerLink="PasswordGenerator"
                    portType="ns3:GeneratePassword" operation="generatePassword"
                    inputVariable="Invoke_PasswordGenerator_generatePassword_InputVariable"
                    outputVariable="Invoke_PasswordGenerator_generatePassword_OutputVariable"/>
            <assign name="Assign3">
              <copy>
                <from>$inputVariable.payload/ns7:Email</from>
                <to>$Invoke_CreateClient_process_InputVariable.payload/ns7:Email</to>
              </copy>
              <copy>
                <from>$inputVariable.payload/ns7:Address</from>
                <to>$Invoke_CreateClient_process_InputVariable.payload/ns7:Address</to>
              </copy>
              <copy>
                <from>$inputVariable.payload/ns7:PhoneNumber</from>
                <to>$Invoke_CreateClient_process_InputVariable.payload/ns7:PhoneNumber</to>
              </copy>
              <copy>
                <from>$Invoke_PasswordGenerator_generatePassword_OutputVariable.parameters/return</from>
                <to>$Invoke_CreateClient_process_InputVariable.payload/ns7:Password</to>
              </copy>
            </assign>
            <invoke name="Invoke_CreateClient"
                    partnerLink="CreateClient" portType="ns5:CreateClient"
                    operation="process" bpelx:invokeAsDetail="no"
                    inputVariable="Invoke_CreateClient_process_InputVariable"/>
            <assign name="Assign4">
              <copy>
                <from>$inputVariable.payload/ns7:Email</from>
                <to>$Invoke_GetClientID_process_InputVariable.payload/ns7:Email</to>
              </copy>
            </assign>
            <invoke name="Invoke_GetClientID"
                    partnerLink="GetClientID" portType="ns9:GetID"
                    operation="process" bpelx:invokeAsDetail="no"
                    inputVariable="Invoke_GetClientID_process_InputVariable"
                    outputVariable="Invoke_GetClientID_process_OutputVariable"/>
            <assign name="Assign5">
              <copy>
                <from>concat(concat("Welcome to FormoPlace! Your id is ", string($Invoke_GetClientID_process_OutputVariable.payload/ns7:Id)), concat( " and your password is ", $Invoke_PasswordGenerator_generatePassword_OutputVariable.parameters/return))</from>
                <to>$Invoke_SendSMS_processMessage_InputVariable.parameters/Message</to>
              </copy>
              <copy>
                <from>$inputVariable.payload/ns7:PhoneNumber</from>
                <to>$Invoke_SendSMS_processMessage_InputVariable.parameters/To</to>
              </copy>
            </assign>
            <invoke name="Invoke_SendSMS"
                    partnerLink="SendSMS" portType="ns6:SendSMSService"
                    operation="processMessage" bpelx:invokeAsDetail="no"
                    inputVariable="Invoke_SendSMS_processMessage_InputVariable"
                    outputVariable="Invoke_SendSMS_processMessage_OutputVariable"/>
            <assign name="Assign6">
              <copy>
                <from>concat("Account created for ", $inputVariable.payload/ns7:Email)</from>
                <to>$outputVariable.payload/ns7:Result</to>
              </copy>
            </assign>
          </sequence>
          <else>
            <documentation>
              <![CDATA[Address not ok]]>
            </documentation>
            <assign name="Assign8">
              <copy>
                <from>concat(concat("Address ", $inputVariable.payload/ns7:Address), " is invalid")</from>
                <to>$outputVariable.payload/ns7:Result</to>
              </copy>
            </assign>
          </else>
        </if>
      </sequence>
      <else>
        <documentation>
          <![CDATA[Account exists]]>
        </documentation>
        <assign name="Assign7">
          <copy>
            <from>concat(concat("Account for ", $inputVariable.payload/ns7:Email),  " already exists")</from>
            <to>$outputVariable.payload/ns7:Result</to>
          </copy>
        </assign>
      </else>
    </if>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="registerclient_client" portType="client:RegisterClient" operation="process" variable="outputVariable"/>
  </sequence>
</process>