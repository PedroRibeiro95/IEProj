<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Fri Mar 24 22:45:38 PDT 2017
  Author:  oracle
  Type: BPEL 2.0 Process
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="RegisterClient"
               targetNamespace="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://xmlns.oracle.com/CheckRegisterService/CheckRegister/CheckRegister"
         xmlns:ns2="http://xmlns.oracle.com/VerifyAddressService/VerifyAddress/VerifyAddress"
         xmlns:ns4="http://www.tecnico.ie.proj.com"
         xmlns:ns3="http://www.example.org"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap">

    <import namespace="http://xmlns.oracle.com/RegisterClientService/RegisterClient/RegisterClient" location="RegisterClient.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="registerclient_client" partnerLinkType="client:RegisterClient" myRole="RegisterClientProvider"/>
    <partnerLink name="CheckRegisterService" partnerLinkType="ns1:CheckRegister"
                 partnerRole="CheckRegisterProvider"/>
    <partnerLink name="VerifyAddressService" partnerLinkType="ns2:VerifyAddress"
                 partnerRole="VerifyAddressProvider"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:RegisterClientRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:RegisterClientResponseMessage"/>
    <variable name="Invoke1_process_InputVariable"
              messageType="ns1:CheckRegisterRequestMessage"/>
    <variable name="Invoke1_process_OutputVariable"
              messageType="ns1:CheckRegisterResponseMessage"/>
    <variable name="Invoke2_process_InputVariable"
              messageType="ns2:VerifyAddressRequestMessage"/>
    <variable name="Invoke2_process_OutputVariable"
              messageType="ns2:VerifyAddressResponseMessage"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in RegisterClient.wsdl) -->
    <receive name="receiveInput" partnerLink="registerclient_client" portType="client:RegisterClient" operation="process" variable="inputVariable" createInstance="yes"/>
    <assign name="Assign1">
      <copy>
        <from>$inputVariable.payload/ns3:Email</from>
        <to>$Invoke1_process_InputVariable.payload/ns4:Email</to>
      </copy>
    </assign>
    <invoke name="Invoke1" bpelx:invokeAsDetail="no"
            partnerLink="CheckRegisterService" portType="ns1:CheckRegister"
            operation="process" inputVariable="Invoke1_process_InputVariable"
            outputVariable="Invoke1_process_OutputVariable"/>
    <if name="If1">
      <documentation>
        <![CDATA[NOACC]]>
      </documentation>
      <condition>$Invoke1_process_OutputVariable.payload/ns4:Response = 'NOACC'</condition>
      <sequence name="Sequence1">
        <assign name="Assign3">
          <copy>
            <from>$inputVariable.payload/ns3:Address</from>
            <to>$Invoke2_process_InputVariable.payload/ns3:Address</to>
          </copy>
        </assign>
        <invoke name="Invoke2" bpelx:invokeAsDetail="no"
                partnerLink="VerifyAddressService"
                portType="ns2:VerifyAddress" operation="process"
                inputVariable="Invoke2_process_InputVariable"
                outputVariable="Invoke2_process_OutputVariable"/>
        <if name="If2">
          <documentation>
            <![CDATA[ADDROK]]>
          </documentation>
          <condition>$Invoke1_process_OutputVariable.payload/ns4:Response = true()</condition>
          <assign name="Assign4">
            <copy>
              <from>concat('', 'ADDROK')</from>
              <to>$outputVariable.payload/ns3:ReturnRegister</to>
            </copy>
          </assign>
          <else>
            <documentation>
              <![CDATA[ADDRNOK]]>
            </documentation>
            <assign name="Assign5">
              <copy>
                <from>concat('', 'ADDRNOK')</from>
                <to>$outputVariable.payload/ns3:ReturnRegister</to>
              </copy>
            </assign>
          </else>
        </if>
      </sequence>
      <else>
        <documentation>
          <![CDATA[ACC]]>
        </documentation>
        <assign name="Assign2">
          <copy>
            <from>concat('', 'ACC ERROR')</from>
            <to>$outputVariable.payload/ns3:ReturnRegister</to>
          </copy>
        </assign>
      </else>
    </if>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="registerclient_client" portType="client:RegisterClient" operation="process" variable="outputVariable"/>
  </sequence>
</process>