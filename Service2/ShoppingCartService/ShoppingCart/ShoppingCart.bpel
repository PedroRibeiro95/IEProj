<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sun Mar 26 17:55:17 PDT 2017
  Author:  oracle
  Type: BPEL 2.0 Process
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ShoppingCart"
               targetNamespace="http://xmlns.oracle.com/ShoppingCartService/ShoppingCart/ShoppingCart"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/ShoppingCartService/ShoppingCart/ShoppingCart"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://xmlns.oracle.com/CheckRegisteredService/CheckRegistered/CheckRegister"
         xmlns:ns2="http://xmlns.oracle.com/InsertItemService/InsertItem/InsertItem"
         xmlns:ns3="http://www.example.org"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns4="http://xmlns.oracle.com/CheckItemService/CheckItem/CheckItem"
         xmlns:ns5="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/CheckItemDB"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/db/top/CheckItemDB"
         xmlns:ns7="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/InsertItemDB"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/db/top/InsertItemDB"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/InsertCartDB"
         xmlns:ns10="http://xmlns.oracle.com/pcbpel/adapter/db/InsertCartDB"
         xmlns:ns11="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/GetAvailableStockDB"
         xmlns:ns12="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/UpdateStockDB"
         xmlns:ns13="http://xmlns.oracle.com/pcbpel/adapter/db/GetAvailableStockDB"
         xmlns:ns14="http://xmlns.oracle.com/pcbpel/adapter/db/UpdateStockDB"
         xmlns:ns15="http://xmlns.oracle.com/pcbpel/adapter/db/ShoppingCartService/ShoppingCart/GetStockDB"
         xmlns:ns16="http://xmlns.oracle.com/pcbpel/adapter/db/top/GetStockDB">

    <import namespace="http://xmlns.oracle.com/ShoppingCartService/ShoppingCart/ShoppingCart" location="ShoppingCart.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="shoppingcart_client" partnerLinkType="client:ShoppingCart" myRole="ShoppingCartProvider"/>
    <partnerLink name="CheckRegistered" partnerLinkType="ns1:CheckRegister"
                 partnerRole="CheckRegisterProvider"/>
    <partnerLink name="CheckItemDB" partnerLinkType="ns5:CheckItemDB_plt"
                 partnerRole="CheckItemDB_role"/>
    <partnerLink name="InsertCartDB" partnerLinkType="ns9:InsertCartDB_plt"
                 partnerRole="InsertCartDB_role"/>
    <partnerLink name="UpdateStockDB" partnerLinkType="ns12:UpdateStockDB_plt"
                 partnerRole="UpdateStockDB_role"/>
    <partnerLink name="GetStockDB" partnerLinkType="ns15:GetStockDB_plt"
                 partnerRole="GetStockDB_role"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:ShoppingCartRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="client:ShoppingCartResponseMessage"/>
    <variable name="Invoke_CheckRegistered_process_InputVariable"
              messageType="ns1:CheckRegisterRequestMessage"/>
    <variable name="Invoke_CheckRegistered_process_OutputVariable"
              messageType="ns1:CheckRegisterResponseMessage"/>
    <variable name="Invoke_CheckItem_selectByPrimaryKey_InputVariable"
              messageType="ns5:selectByPrimaryKey_inputParameters"/>
    <variable name="Invoke_CheckItem_selectByPrimaryKey_OutputVariable"
              messageType="ns5:StockCollection_msg"/>
    <variable name="Invoke_InsertItemCart_InsertCartDB_InputVariable"
              messageType="ns9:InsertCartDBInput_msg"/>
    <variable name="Invoke_UpdateStock_UpdateStockDB_InputVariable"
              messageType="ns12:UpdateStockDBInput_msg"/>
    <variable name="Invoke_GetAvailableStock_selectByPrimaryKey_InputVariable"
              messageType="ns15:selectByPrimaryKey_inputParameters"/>
    <variable name="Invoke_GetAvailableStock_selectByPrimaryKey_OutputVariable"
              messageType="ns15:StockCollection_msg"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in ShoppingCart.wsdl) -->
    <receive name="receiveInput" partnerLink="shoppingcart_client" portType="client:ShoppingCart" operation="process" variable="inputVariable" createInstance="yes"/>
    <assign name="Assign_email">
      <copy>
        <from>$inputVariable.payload/ns3:Userid</from>
        <to>$Invoke_CheckRegistered_process_InputVariable.payload/ns3:Id</to>
      </copy>
      <copy>
        <from>$inputVariable.payload/ns3:Password</from>
        <to>$Invoke_CheckRegistered_process_InputVariable.payload/ns3:Password</to>
      </copy>
    </assign>
    <invoke name="Invoke_CheckRegistered"
            partnerLink="CheckRegistered" portType="ns1:CheckRegister"
            operation="process" bpelx:invokeAsDetail="no"
            inputVariable="Invoke_CheckRegistered_process_InputVariable"
            outputVariable="Invoke_CheckRegistered_process_OutputVariable"/>
    <if name="If1">
      <documentation>
        <![CDATA[Registered]]>
      </documentation>
      <condition>$Invoke_CheckRegistered_process_OutputVariable.payload/ns3:IsRegistered = "true"</condition>
      <sequence name="Sequence1">
        <assign name="Assign_Itemid">
          <copy>
            <from>$inputVariable.payload/ns3:Itemid</from>
            <to>$Invoke_CheckItem_selectByPrimaryKey_InputVariable.selectByPrimaryKey_inputParameters/ns6:itemid</to>
          </copy>
        </assign>
        <invoke name="Invoke_CheckItem"
                inputVariable="Invoke_CheckItem_selectByPrimaryKey_InputVariable"
                outputVariable="Invoke_CheckItem_selectByPrimaryKey_OutputVariable"
                bpelx:invokeAsDetail="no" partnerLink="CheckItemDB"
                portType="ns5:CheckItemDB_ptt" operation="selectByPrimaryKey"/>
        <if name="If2">
          <documentation>
            <![CDATA[ItemExists]]>
          </documentation>
          <condition>$Invoke_CheckItem_selectByPrimaryKey_OutputVariable.StockCollection/ns6:Stock/ns6:itemid != ""</condition>
          <sequence>
            <assign name="Assign_Itemid">
              <copy>
                <from>$inputVariable.payload/ns3:Itemid</from>
                <to>$Invoke_GetAvailableStock_selectByPrimaryKey_InputVariable.selectByPrimaryKey_inputParameters/ns16:itemid</to>
              </copy>
            </assign>
            <invoke name="Invoke_GetAvailableStock"
                    partnerLink="GetStockDB"
                    portType="ns15:GetStockDB_ptt"
                    operation="selectByPrimaryKey"
                    inputVariable="Invoke_GetAvailableStock_selectByPrimaryKey_InputVariable"
                    outputVariable="Invoke_GetAvailableStock_selectByPrimaryKey_OutputVariable"
                    bpelx:invokeAsDetail="no"/>
            <if name="If_EnoughStock">
              <documentation>
                <![CDATA[Enough stock]]>
              </documentation>
              <condition>$Invoke_GetAvailableStock_selectByPrimaryKey_OutputVariable.StockCollection/ns16:Stock/ns16:quantity &gt; 0</condition>
              <sequence>
                <assign name="Assign_ItemInformation">
                  <copy>
                    <from>$inputVariable.payload/ns3:Userid</from>
                    <to>$Invoke_InsertItemCart_InsertCartDB_InputVariable.InsertCartDBInput_msg/ns10:userid</to>
                  </copy>
                  <copy>
                    <from>$inputVariable.payload/ns3:Itemid</from>
                    <to>$Invoke_InsertItemCart_InsertCartDB_InputVariable.InsertCartDBInput_msg/ns10:itemid</to>
                  </copy>
                  <copy>
                    <from>$inputVariable.payload/ns3:Quantity</from>
                    <to>$Invoke_InsertItemCart_InsertCartDB_InputVariable.InsertCartDBInput_msg/ns10:quantity</to>
                  </copy>
                </assign>
                <invoke name="Invoke_InsertItemCart" partnerLink="InsertCartDB"
                        portType="ns9:InsertCartDB_ptt" operation="InsertCartDB"
                        inputVariable="Invoke_InsertItemCart_InsertCartDB_InputVariable"
                        bpelx:invokeAsDetail="no"/>
                <assign name="Assign_Quantity">
                  <copy>
                    <from>$inputVariable.payload/ns3:Itemid</from>
                    <to>$Invoke_UpdateStock_UpdateStockDB_InputVariable.UpdateStockDBInput_msg/ns14:itemid</to>
                  </copy>
                  <copy>
                    <from>$Invoke_GetAvailableStock_selectByPrimaryKey_OutputVariable.StockCollection/ns16:Stock/ns16:quantity - $inputVariable.payload/ns3:Quantity</from>
                    <to>$Invoke_UpdateStock_UpdateStockDB_InputVariable.UpdateStockDBInput_msg/ns14:quantity</to>
                  </copy>
                </assign>
                <invoke name="Invoke_UpdateStock" bpelx:invokeAsDetail="no"
                        partnerLink="UpdateStockDB"
                        portType="ns12:UpdateStockDB_ptt"
                        operation="UpdateStockDB"
                        inputVariable="Invoke_UpdateStock_UpdateStockDB_InputVariable"/>
                <assign name="Assign_OKResponse">
                  <copy>
                    <from>"Item inserted in cart"</from>
                    <to>$outputVariable.payload/ns3:Response</to>
                  </copy>
                </assign>
              </sequence>
              <else>
                <documentation>
                  <![CDATA[Not enough stock]]>
                </documentation>
                <assign name="Assign_NotEnoughStock">
                  <copy>
                    <from>concat("NOSTK", "")</from>
                    <to>$outputVariable.payload/ns3:Response</to>
                  </copy>
                </assign>
              </else>
            </if>
          </sequence>
          <else>
            <documentation>
              <![CDATA[ItemDoesNotExist]]>
            </documentation>
            <assign name="Assign_ErrorMessage">
              <copy>
                <from>concat("", "Item does not exist")</from>
                <to>$outputVariable.payload/ns3:Response</to>
              </copy>
            </assign>
          </else>
        </if>
      </sequence>
      <else>
        <documentation>
          <![CDATA[Not registered]]>
        </documentation>
        <assign name="Assign_ErrorNotRegistered">
          <copy>
            <from>"Account not registered"</from>
            <to>$outputVariable.payload/ns3:Response</to>
          </copy>
        </assign>
      </else>
    </if>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="shoppingcart_client" portType="client:ShoppingCart" operation="process" variable="outputVariable"/>
  </sequence>
</process>